openapi: 3.0.0
info:
  title: Ecommerce API
  description: Swagger documentation for the Ecommerce backend project.
  version: 1.0.0
servers:
  - url: http://localhost:4000/api

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        gender:
          type: string
          enum: [male, female]
        Nationality:
          type: string
        birthDay:
          type: string
          format: date
        authProvider:
          type: string
          enum: [local, google]
        role:
          type: string
          enum: [user, admin]
        cart:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer
        resetToken:
          type: string
        resetTokenExpiry:
          type: string
          format: date-time
    Product:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        price:
          type: number
        image:
          type: array
          items: { type: string }
        category:
          type: string
        subCategory:
          type: string
        sizes:
          type: array
          items: { type: string }
        userId:
          type: string
        stock:
          type: integer
    Order:
      type: object
      properties:
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
              quantity:
                type: integer
        userId:
          type: string
        address:
          type: string
        status:
          type: string
        paymentMethod:
          type: string
        payment:
          type: boolean
    Review:
      type: object
      properties:
        productId:
          type: string
        userId:
          type: string
        rating:
          type: integer
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdAt:
          type: string
          format: date-time
    WishList:
      type: object
      properties:
        name:
          type: string
        userId:
          type: string
        products:
          type: array
          items:
            type: object
            properties:
              productId:
                type: string
        description:
          type: string

security:
  - bearerAuth: []

paths:
  /auth/login:
    post:
      tags: [Auth]
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email: { type: string }
                password: { type: string }
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                properties:
                  token: { type: string }
                  userId: { type: string }
        '400': { description: Invalid credentials }

  /auth/signup:
    post:
      tags: [Auth]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '201': { description: User created }
        '400': { description: Bad request }

  /auth/reset-password:
    post:
      tags: [Auth]
      summary: Request password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                email: { type: string }
      responses:
        '200': { description: Email sent }

  /auth/confirm-reset-password:
    post:
      tags: [Auth]
      summary: Confirm password reset
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                token: { type: string }
                newPassword: { type: string }
      responses:
        '200': { description: Password changed }

  /auth/google:
    get:
      tags: [Auth]
      summary: Google OAuth login
      responses:
        '302': { description: Redirect to Google login }

  /auth/google/callback:
    get:
      tags: [Auth]
      summary: Google OAuth callback
      responses:
        '200':
          description: Login with Google successful
          content:
            application/json:
              schema:
                properties:
                  token: { type: string }
                  userId: { type: string }

  /admin/product:
    post:
      tags: [Admin]
      summary: Add new product (admin only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '201': { description: Product created }
    put:
      tags: [Admin]
      summary: Update product (admin only)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Product'
      responses:
        '200': { description: Product updated }

  /admin/product/{productId}:
    get:
      tags: [Admin]
      summary: Get product details (admin only)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
    delete:
      tags: [Admin]
      summary: Delete product (admin only)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Product deleted }

  /admin/products:
    get:
      tags: [Admin]
      summary: Get all products (admin only)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'

  /admin/wishlists:
    get:
      tags: [Admin]
      summary: Get all wishlists (admin only)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of wishlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WishList'

  /admin/orders:
    get:
      tags: [Admin]
      summary: Get all orders (admin only)
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'

  /admin/order/status/{orderId}:
    put:
      tags: [Admin]
      summary: Update order status (admin only)
      security: [{ bearerAuth: [] }]
      parameters:
        - name: orderId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                status: { type: string }
      responses:
        '200': { description: Status updated }

  /cart:
    get:
      tags: [Cart]
      summary: Get user's cart
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: Cart details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
    post:
      tags: [Cart]
      summary: Add item to cart
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                productId: { type: string }
                quantity: { type: integer }
      responses:
        '201': { description: Item added }
  /cart/{cartId}:
    delete:
      tags: [Cart]
      summary: Remove item from cart
      security: [{ bearerAuth: [] }]
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Item removed }
    put:
      tags: [Cart]
      summary: Update item quantity in cart
      security: [{ bearerAuth: [] }]
      parameters:
        - name: cartId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                quantity: { type: integer }
      responses:
        '200': { description: Item updated }

  /review:
    post:
      tags: [Review]
      summary: Add review
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201': { description: Review added }
  /review/{reviewId}:
    put:
      tags: [Review]
      summary: Update review
      security: [{ bearerAuth: [] }]
      parameters:
        - name: reviewId
          in: path
          required: true
          schema: { type: string }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200': { description: Review updated }
    delete:
      tags: [Review]
      summary: Delete review
      security: [{ bearerAuth: [] }]
      parameters:
        - name: reviewId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Review deleted }

  /review/product/{productId}:
    get:
      tags: [Review]
      summary: Get reviews for a product
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
  /review/user/{userId}:
    get:
      tags: [Review]
      summary: Get reviews by a user
      parameters:
        - name: userId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: List of reviews
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'

  /wishlist:
    get:
      tags: [WishList]
      summary: Get wishlists
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of wishlists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WishList'
    post:
      tags: [WishList]
      summary: Create wishlist
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishList'
      responses:
        '201': { description: Wishlist created }
    put:
      tags: [WishList]
      summary: Update wishlist
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WishList'
      responses:
        '200': { description: Wishlist updated }
  /wishlist/{wishListId}:
    get:
      tags: [WishList]
      summary: Get wishlist by id
      security: [{ bearerAuth: [] }]
      parameters:
        - name: wishListId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Wishlist details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WishList'
    delete:
      tags: [WishList]
      summary: Delete wishlist
      security: [{ bearerAuth: [] }]
      parameters:
        - name: wishListId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Wishlist deleted }
  /wishlist/product:
    post:
      tags: [WishList]
      summary: Add product to wishlist
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              properties:
                wishListId: { type: string }
                productId: { type: string }
      responses:
        '200': { description: Product added }
  /wishlist/product/{wishListId}:
    delete:
      tags: [WishList]
      summary: Remove product from wishlist
      security: [{ bearerAuth: [] }]
      parameters:
        - name: wishListId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200': { description: Product removed }

  /order/orders:
    get:
      tags: [Order]
      summary: Get user orders
      security: [{ bearerAuth: [] }]
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Order'
  /order:
    post:
      tags: [Order]
      summary: Place an order
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201': { description: Order placed }
  /order/stripe:
    post:
      tags: [Order]
      summary: Place an order via Stripe
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '201': { description: Order placed }
  /order/verify-stripe:
    get:
      tags: [Order]
      summary: Verify Stripe payment
      parameters: []
      responses:
        '200': { description: Stripe verified }

  /product:
    get:
      tags: [Product]
      summary: Get all products
      parameters: []
      responses:
        '200':
          description: List of products
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Product'
  /product/{productId}:
    get:
      tags: [Product]
      summary: Get product by id
      parameters:
        - name: productId
          in: path
          required: true
          schema: { type: string }
      responses:
        '200':
          description: Product details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'